### This file was generated by Nexus Schema
### Do not make changes to this file directly


type ApiAccess {
  city: String
  createdAt: DateTime!
  duration: Int!
  id: String!
  ip: String!
  operationName: String!
  region: String
  reqUser: User
  userAgent: String!
}

input ApiAccessCreateInput {
  city: String
  country: String
  createdAt: DateTime
  duration: Int!
  eu: Boolean
  id: String
  ip: String!
  lat: Float
  lon: Float
  operationName: String!
  region: String
  reqUser: UserCreateOneWithoutApiAccessInput
  userAgent: String!
}

input ApiAccessCreateManyWithoutReqUserInput {
  connect: [ApiAccessWhereUniqueInput!]
  create: [ApiAccessCreateWithoutReqUserInput!]
}

input ApiAccessCreateWithoutReqUserInput {
  city: String
  country: String
  createdAt: DateTime
  duration: Int!
  eu: Boolean
  id: String
  ip: String!
  lat: Float
  lon: Float
  operationName: String!
  region: String
  userAgent: String!
}

input ApiAccessListRelationFilter {
  every: ApiAccessWhereInput
  none: ApiAccessWhereInput
  some: ApiAccessWhereInput
}

input ApiAccessOrderByInput {
  city: SortOrder
  country: SortOrder
  createdAt: SortOrder
  duration: SortOrder
  eu: SortOrder
  id: SortOrder
  ip: SortOrder
  lat: SortOrder
  lon: SortOrder
  operationName: SortOrder
  region: SortOrder
  reqUserId: SortOrder
  userAgent: SortOrder
}

input ApiAccessScalarWhereInput {
  AND: [ApiAccessScalarWhereInput!]
  city: StringNullableFilter
  country: StringNullableFilter
  createdAt: DateTimeFilter
  duration: IntFilter
  eu: BoolNullableFilter
  id: StringFilter
  ip: StringFilter
  lat: FloatNullableFilter
  lon: FloatNullableFilter
  NOT: [ApiAccessScalarWhereInput!]
  operationName: StringFilter
  OR: [ApiAccessScalarWhereInput!]
  region: StringNullableFilter
  reqUserId: StringNullableFilter
  userAgent: StringFilter
}

input ApiAccessUpdateInput {
  city: NullableStringFieldUpdateOperationsInput
  country: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  duration: IntFieldUpdateOperationsInput
  eu: NullableBoolFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  ip: StringFieldUpdateOperationsInput
  lat: NullableFloatFieldUpdateOperationsInput
  lon: NullableFloatFieldUpdateOperationsInput
  operationName: StringFieldUpdateOperationsInput
  region: NullableStringFieldUpdateOperationsInput
  reqUser: UserUpdateOneWithoutApiAccessInput
  userAgent: StringFieldUpdateOperationsInput
}

input ApiAccessUpdateManyDataInput {
  city: NullableStringFieldUpdateOperationsInput
  country: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  duration: IntFieldUpdateOperationsInput
  eu: NullableBoolFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  ip: StringFieldUpdateOperationsInput
  lat: NullableFloatFieldUpdateOperationsInput
  lon: NullableFloatFieldUpdateOperationsInput
  operationName: StringFieldUpdateOperationsInput
  region: NullableStringFieldUpdateOperationsInput
  userAgent: StringFieldUpdateOperationsInput
}

input ApiAccessUpdateManyWithoutReqUserInput {
  connect: [ApiAccessWhereUniqueInput!]
  create: [ApiAccessCreateWithoutReqUserInput!]
  delete: [ApiAccessWhereUniqueInput!]
  deleteMany: [ApiAccessScalarWhereInput!]
  disconnect: [ApiAccessWhereUniqueInput!]
  set: [ApiAccessWhereUniqueInput!]
  update: [ApiAccessUpdateWithWhereUniqueWithoutReqUserInput!]
  updateMany: [ApiAccessUpdateManyWithWhereNestedInput!]
  upsert: [ApiAccessUpsertWithWhereUniqueWithoutReqUserInput!]
}

input ApiAccessUpdateManyWithWhereNestedInput {
  data: ApiAccessUpdateManyDataInput!
  where: ApiAccessScalarWhereInput!
}

input ApiAccessUpdateWithoutReqUserDataInput {
  city: NullableStringFieldUpdateOperationsInput
  country: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  duration: IntFieldUpdateOperationsInput
  eu: NullableBoolFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  ip: StringFieldUpdateOperationsInput
  lat: NullableFloatFieldUpdateOperationsInput
  lon: NullableFloatFieldUpdateOperationsInput
  operationName: StringFieldUpdateOperationsInput
  region: NullableStringFieldUpdateOperationsInput
  userAgent: StringFieldUpdateOperationsInput
}

input ApiAccessUpdateWithWhereUniqueWithoutReqUserInput {
  data: ApiAccessUpdateWithoutReqUserDataInput!
  where: ApiAccessWhereUniqueInput!
}

input ApiAccessUpsertWithWhereUniqueWithoutReqUserInput {
  create: ApiAccessCreateWithoutReqUserInput!
  update: ApiAccessUpdateWithoutReqUserDataInput!
  where: ApiAccessWhereUniqueInput!
}

input ApiAccessWhereInput {
  AND: [ApiAccessWhereInput!]
  city: StringNullableFilter
  country: StringNullableFilter
  createdAt: DateTimeFilter
  duration: IntFilter
  eu: BoolNullableFilter
  id: StringFilter
  ip: StringFilter
  lat: FloatNullableFilter
  lon: FloatNullableFilter
  NOT: [ApiAccessWhereInput!]
  operationName: StringFilter
  OR: [ApiAccessWhereInput!]
  region: StringNullableFilter
  reqUser: UserWhereInput
  reqUserId: StringNullableFilter
  userAgent: StringFilter
}

input ApiAccessWhereUniqueInput {
  id: String
}

type ApiError {
  createdAt: DateTime!
  id: String!
  ip: String!
  message: String!
  operationName: String!
  reqBody: Json!
  reqUser: User
  resBody: Json!
  stack: Json!
  userAgent: String!
}

input ApiErrorCreateInput {
  createdAt: DateTime
  id: String
  ip: String!
  message: String!
  operationName: String!
  reqBody: Json!
  reqUser: UserCreateOneWithoutApiErrorInput
  resBody: Json!
  stack: Json!
  userAgent: String!
}

input ApiErrorCreateManyWithoutReqUserInput {
  connect: [ApiErrorWhereUniqueInput!]
  create: [ApiErrorCreateWithoutReqUserInput!]
}

input ApiErrorCreateWithoutReqUserInput {
  createdAt: DateTime
  id: String
  ip: String!
  message: String!
  operationName: String!
  reqBody: Json!
  resBody: Json!
  stack: Json!
  userAgent: String!
}

input ApiErrorListRelationFilter {
  every: ApiErrorWhereInput
  none: ApiErrorWhereInput
  some: ApiErrorWhereInput
}

input ApiErrorOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  ip: SortOrder
  message: SortOrder
  operationName: SortOrder
  reqBody: SortOrder
  reqUserId: SortOrder
  resBody: SortOrder
  stack: SortOrder
  userAgent: SortOrder
}

input ApiErrorScalarWhereInput {
  AND: [ApiErrorScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  ip: StringFilter
  message: StringFilter
  NOT: [ApiErrorScalarWhereInput!]
  operationName: StringFilter
  OR: [ApiErrorScalarWhereInput!]
  reqUserId: StringNullableFilter
  userAgent: StringFilter
}

input ApiErrorUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  ip: StringFieldUpdateOperationsInput
  message: StringFieldUpdateOperationsInput
  operationName: StringFieldUpdateOperationsInput
  reqBody: Json
  reqUser: UserUpdateOneWithoutApiErrorInput
  resBody: Json
  stack: Json
  userAgent: StringFieldUpdateOperationsInput
}

input ApiErrorUpdateManyDataInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  ip: StringFieldUpdateOperationsInput
  message: StringFieldUpdateOperationsInput
  operationName: StringFieldUpdateOperationsInput
  reqBody: Json
  resBody: Json
  stack: Json
  userAgent: StringFieldUpdateOperationsInput
}

input ApiErrorUpdateManyWithoutReqUserInput {
  connect: [ApiErrorWhereUniqueInput!]
  create: [ApiErrorCreateWithoutReqUserInput!]
  delete: [ApiErrorWhereUniqueInput!]
  deleteMany: [ApiErrorScalarWhereInput!]
  disconnect: [ApiErrorWhereUniqueInput!]
  set: [ApiErrorWhereUniqueInput!]
  update: [ApiErrorUpdateWithWhereUniqueWithoutReqUserInput!]
  updateMany: [ApiErrorUpdateManyWithWhereNestedInput!]
  upsert: [ApiErrorUpsertWithWhereUniqueWithoutReqUserInput!]
}

input ApiErrorUpdateManyWithWhereNestedInput {
  data: ApiErrorUpdateManyDataInput!
  where: ApiErrorScalarWhereInput!
}

input ApiErrorUpdateWithoutReqUserDataInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  ip: StringFieldUpdateOperationsInput
  message: StringFieldUpdateOperationsInput
  operationName: StringFieldUpdateOperationsInput
  reqBody: Json
  resBody: Json
  stack: Json
  userAgent: StringFieldUpdateOperationsInput
}

input ApiErrorUpdateWithWhereUniqueWithoutReqUserInput {
  data: ApiErrorUpdateWithoutReqUserDataInput!
  where: ApiErrorWhereUniqueInput!
}

input ApiErrorUpsertWithWhereUniqueWithoutReqUserInput {
  create: ApiErrorCreateWithoutReqUserInput!
  update: ApiErrorUpdateWithoutReqUserDataInput!
  where: ApiErrorWhereUniqueInput!
}

input ApiErrorWhereInput {
  AND: [ApiErrorWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  ip: StringFilter
  message: StringFilter
  NOT: [ApiErrorWhereInput!]
  operationName: StringFilter
  OR: [ApiErrorWhereInput!]
  reqUser: UserWhereInput
  reqUserId: StringNullableFilter
  userAgent: StringFilter
}

input ApiErrorWhereUniqueInput {
  id: String
}

input BoolNullableFilter {
  equals: Boolean
  not: NestedBoolNullableFilter
}

type ClientEvent {
  city: String
  createdAt: DateTime!
  id: String!
  ip: String!
  name: String!
  region: String
  reqUser: User
  reqUserById: String
  userAgent: String!
}

input ClientEventCreateManyWithoutReqUserInput {
  connect: [ClientEventWhereUniqueInput!]
  create: [ClientEventCreateWithoutReqUserInput!]
}

input ClientEventCreateWithoutReqUserInput {
  city: String
  createdAt: DateTime
  id: String
  ip: String!
  name: String!
  region: String
  userAgent: String!
}

input ClientEventListRelationFilter {
  every: ClientEventWhereInput
  none: ClientEventWhereInput
  some: ClientEventWhereInput
}

input ClientEventScalarWhereInput {
  AND: [ClientEventScalarWhereInput!]
  city: StringNullableFilter
  createdAt: DateTimeFilter
  id: StringFilter
  ip: StringFilter
  name: StringFilter
  NOT: [ClientEventScalarWhereInput!]
  OR: [ClientEventScalarWhereInput!]
  region: StringNullableFilter
  reqUserById: StringNullableFilter
  userAgent: StringFilter
}

input ClientEventUpdateManyDataInput {
  city: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  ip: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  region: NullableStringFieldUpdateOperationsInput
  userAgent: StringFieldUpdateOperationsInput
}

input ClientEventUpdateManyWithoutReqUserInput {
  connect: [ClientEventWhereUniqueInput!]
  create: [ClientEventCreateWithoutReqUserInput!]
  delete: [ClientEventWhereUniqueInput!]
  deleteMany: [ClientEventScalarWhereInput!]
  disconnect: [ClientEventWhereUniqueInput!]
  set: [ClientEventWhereUniqueInput!]
  update: [ClientEventUpdateWithWhereUniqueWithoutReqUserInput!]
  updateMany: [ClientEventUpdateManyWithWhereNestedInput!]
  upsert: [ClientEventUpsertWithWhereUniqueWithoutReqUserInput!]
}

input ClientEventUpdateManyWithWhereNestedInput {
  data: ClientEventUpdateManyDataInput!
  where: ClientEventScalarWhereInput!
}

input ClientEventUpdateWithoutReqUserDataInput {
  city: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  ip: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  region: NullableStringFieldUpdateOperationsInput
  userAgent: StringFieldUpdateOperationsInput
}

input ClientEventUpdateWithWhereUniqueWithoutReqUserInput {
  data: ClientEventUpdateWithoutReqUserDataInput!
  where: ClientEventWhereUniqueInput!
}

input ClientEventUpsertWithWhereUniqueWithoutReqUserInput {
  create: ClientEventCreateWithoutReqUserInput!
  update: ClientEventUpdateWithoutReqUserDataInput!
  where: ClientEventWhereUniqueInput!
}

input ClientEventWhereInput {
  AND: [ClientEventWhereInput!]
  city: StringNullableFilter
  createdAt: DateTimeFilter
  id: StringFilter
  ip: StringFilter
  name: StringFilter
  NOT: [ClientEventWhereInput!]
  OR: [ClientEventWhereInput!]
  region: StringNullableFilter
  reqUser: UserWhereInput
  reqUserById: StringNullableFilter
  userAgent: StringFilter
}

input ClientEventWhereUniqueInput {
  id: String
}

scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

"""The Email scalar type asserts email validity"""
scalar Email

"""The Empty scalar has no fields"""
scalar Empty

input EnumPostStatusFieldUpdateOperationsInput {
  set: PostStatus
}

input EnumPostStatusFilter {
  equals: PostStatus
  in: [PostStatus!]
  not: NestedEnumPostStatusFilter
  notIn: [PostStatus!]
}

input EnumUserRoleNullableListFilter {
  equals: [UserRole!]
}

input FloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float!]
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

scalar Json

type Mutation {
  createOneApiAccess(data: ApiAccessCreateInput!): ApiAccess!
  createOneApiError(data: ApiErrorCreateInput!): ApiError!
  createOnePost(data: PostCreateInput!): Post!
  createOneTag(data: TagCreateInput!): Tag!
  createOneUser(data: RegisterInputType!): User
  deleteOnePost(where: PostWhereUniqueInput!): Post
  deleteOneTag(where: TagWhereUniqueInput!): Tag
  deleteOneUser(where: UserWhereUniqueInput!): User
  updateOneApiAccess(data: ApiAccessUpdateInput!, where: ApiAccessWhereUniqueInput!): ApiAccess
  updateOneApiError(data: ApiErrorUpdateInput!, where: ApiErrorWhereUniqueInput!): ApiError
  updateOnePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateOneTag(data: TagUpdateInput!, where: TagWhereUniqueInput!): Tag
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
}

input NestedBoolNullableFilter {
  equals: Boolean
  not: NestedBoolNullableFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedEnumPostStatusFilter {
  equals: PostStatus
  in: [PostStatus!]
  not: NestedEnumPostStatusFilter
  notIn: [PostStatus!]
}

input NestedFloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NullableBoolFieldUpdateOperationsInput {
  set: Boolean
}

input NullableFloatFieldUpdateOperationsInput {
  decrement: Float
  divide: Float
  increment: Float
  multiply: Float
  set: Float
}

input NullableIntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

"""
The Password scalar type asserts password strength and serializes to null
"""
scalar Password

type Post {
  author: User!
  authorId: String!
  id: String!
  status: PostStatus!
  tags(after: TagWhereUniqueInput, before: TagWhereUniqueInput, first: Int, last: Int): [Tag!]!
  title: String!
}

input PostCreateInput {
  author: UserCreateOneWithoutPostsInput!
  blogId: Int
  createdAt: DateTime
  id: String
  status: PostStatus!
  tags: TagCreateManyWithoutPostInput
  title: String!
  updatedAt: DateTime
}

input PostCreateManyWithoutAuthorInput {
  connect: [PostWhereUniqueInput!]
  create: [PostCreateWithoutAuthorInput!]
}

input PostCreateOneWithoutTagsInput {
  connect: PostWhereUniqueInput
  create: PostCreateWithoutTagsInput
}

input PostCreateWithoutAuthorInput {
  blogId: Int
  createdAt: DateTime
  id: String
  status: PostStatus!
  tags: TagCreateManyWithoutPostInput
  title: String!
  updatedAt: DateTime
}

input PostCreateWithoutTagsInput {
  author: UserCreateOneWithoutPostsInput!
  blogId: Int
  createdAt: DateTime
  id: String
  status: PostStatus!
  title: String!
  updatedAt: DateTime
}

input PostListRelationFilter {
  every: PostWhereInput
  none: PostWhereInput
  some: PostWhereInput
}

input PostOrderByInput {
  authorId: SortOrder
  blogId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  status: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

input PostScalarWhereInput {
  AND: [PostScalarWhereInput!]
  authorId: StringFilter
  blogId: IntNullableFilter
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  status: EnumPostStatusFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

enum PostStatus {
  DRAFT
  PUBLISHED
}

input PostUpdateInput {
  author: UserUpdateOneRequiredWithoutPostsInput
  blogId: NullableIntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  status: EnumPostStatusFieldUpdateOperationsInput
  tags: TagUpdateManyWithoutPostInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PostUpdateManyDataInput {
  blogId: NullableIntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  status: EnumPostStatusFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PostUpdateManyWithoutAuthorInput {
  connect: [PostWhereUniqueInput!]
  create: [PostCreateWithoutAuthorInput!]
  delete: [PostWhereUniqueInput!]
  deleteMany: [PostScalarWhereInput!]
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutAuthorInput!]
}

input PostUpdateManyWithWhereNestedInput {
  data: PostUpdateManyDataInput!
  where: PostScalarWhereInput!
}

input PostUpdateOneWithoutTagsInput {
  connect: PostWhereUniqueInput
  create: PostCreateWithoutTagsInput
  delete: Boolean
  disconnect: Boolean
  update: PostUpdateWithoutTagsDataInput
  upsert: PostUpsertWithoutTagsInput
}

input PostUpdateWithoutAuthorDataInput {
  blogId: NullableIntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  status: EnumPostStatusFieldUpdateOperationsInput
  tags: TagUpdateManyWithoutPostInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PostUpdateWithoutTagsDataInput {
  author: UserUpdateOneRequiredWithoutPostsInput
  blogId: NullableIntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  status: EnumPostStatusFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PostUpdateWithWhereUniqueWithoutAuthorInput {
  data: PostUpdateWithoutAuthorDataInput!
  where: PostWhereUniqueInput!
}

input PostUpsertWithoutTagsInput {
  create: PostCreateWithoutTagsInput!
  update: PostUpdateWithoutTagsDataInput!
}

input PostUpsertWithWhereUniqueWithoutAuthorInput {
  create: PostCreateWithoutAuthorInput!
  update: PostUpdateWithoutAuthorDataInput!
  where: PostWhereUniqueInput!
}

input PostWhereInput {
  AND: [PostWhereInput!]
  author: UserWhereInput
  authorId: StringFilter
  blogId: IntNullableFilter
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [PostWhereInput!]
  OR: [PostWhereInput!]
  status: EnumPostStatusFilter
  tags: TagListRelationFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

input PostWhereUniqueInput {
  id: String
}

type Query {
  apiAccess(where: ApiAccessWhereUniqueInput!): ApiAccess
  apiAccesses(after: ApiAccessWhereUniqueInput, before: ApiAccessWhereUniqueInput, first: Int, last: Int, orderBy: [ApiAccessOrderByInput!], where: ApiAccessWhereInput): [ApiAccess!]!
  apiError(where: ApiErrorWhereUniqueInput!): ApiError
  apiErrors(after: ApiErrorWhereUniqueInput, before: ApiErrorWhereUniqueInput, first: Int, last: Int, orderBy: [ApiErrorOrderByInput!], where: ApiErrorWhereInput): [ApiError!]!
  post(where: PostWhereUniqueInput!): Post
  posts(after: PostWhereUniqueInput, before: PostWhereUniqueInput, first: Int, last: Int, orderBy: [PostOrderByInput!], where: PostWhereInput): [Post!]!
  tag(where: TagWhereUniqueInput!): Tag
  tags(after: TagWhereUniqueInput, before: TagWhereUniqueInput, first: Int, last: Int, orderBy: [TagOrderByInput!], where: TagWhereInput): [Tag!]!
  token(email: String!, password: String!): Token
  user(where: UserWhereUniqueInput!): User
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int, orderBy: [UserOrderByInput!], where: UserWhereInput): [User!]!
}

enum QueryMode {
  default
  insensitive
}

input RegisterInputType {
  email: Email!
  name: String!
  password: Password!
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Tag {
  id: Int!
  value: String!
}

input TagCreateInput {
  createdAt: DateTime
  post: PostCreateOneWithoutTagsInput
  updatedAt: DateTime
  value: String!
}

input TagCreateManyWithoutPostInput {
  connect: [TagWhereUniqueInput!]
  create: [TagCreateWithoutPostInput!]
}

input TagCreateWithoutPostInput {
  createdAt: DateTime
  updatedAt: DateTime
  value: String!
}

input TagListRelationFilter {
  every: TagWhereInput
  none: TagWhereInput
  some: TagWhereInput
}

input TagOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  postId: SortOrder
  updatedAt: SortOrder
  value: SortOrder
}

input TagScalarWhereInput {
  AND: [TagScalarWhereInput!]
  createdAt: DateTimeFilter
  id: IntFilter
  NOT: [TagScalarWhereInput!]
  OR: [TagScalarWhereInput!]
  postId: StringNullableFilter
  updatedAt: DateTimeFilter
  value: StringFilter
}

input TagUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  post: PostUpdateOneWithoutTagsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  value: StringFieldUpdateOperationsInput
}

input TagUpdateManyDataInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  value: StringFieldUpdateOperationsInput
}

input TagUpdateManyWithoutPostInput {
  connect: [TagWhereUniqueInput!]
  create: [TagCreateWithoutPostInput!]
  delete: [TagWhereUniqueInput!]
  deleteMany: [TagScalarWhereInput!]
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  update: [TagUpdateWithWhereUniqueWithoutPostInput!]
  updateMany: [TagUpdateManyWithWhereNestedInput!]
  upsert: [TagUpsertWithWhereUniqueWithoutPostInput!]
}

input TagUpdateManyWithWhereNestedInput {
  data: TagUpdateManyDataInput!
  where: TagScalarWhereInput!
}

input TagUpdateWithoutPostDataInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  value: StringFieldUpdateOperationsInput
}

input TagUpdateWithWhereUniqueWithoutPostInput {
  data: TagUpdateWithoutPostDataInput!
  where: TagWhereUniqueInput!
}

input TagUpsertWithWhereUniqueWithoutPostInput {
  create: TagCreateWithoutPostInput!
  update: TagUpdateWithoutPostDataInput!
  where: TagWhereUniqueInput!
}

input TagWhereInput {
  AND: [TagWhereInput!]
  createdAt: DateTimeFilter
  id: IntFilter
  NOT: [TagWhereInput!]
  OR: [TagWhereInput!]
  post: PostWhereInput
  postId: StringNullableFilter
  updatedAt: DateTimeFilter
  value: StringFilter
}

input TagWhereUniqueInput {
  id: Int
}

type Token {
  accessToken: String
  roles: [String]
  userId: String
}

type User {
  createdAt: DateTime!
  email: Email
  id: String!
  name: String
  password: Password
  posts(after: PostWhereUniqueInput, before: PostWhereUniqueInput, first: Int, last: Int, orderBy: [PostOrderByInput!], where: PostWhereInput): [Post!]!
  roles: [UserRole!]!
  updatedAt: DateTime!
}

input UserCreateOneWithoutApiAccessInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutApiAccessInput
}

input UserCreateOneWithoutApiErrorInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutApiErrorInput
}

input UserCreateOneWithoutPostsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutPostsInput
}

input UserCreaterolesInput {
  set: [UserRole!]!
}

input UserCreateWithoutApiAccessInput {
  ApiError: ApiErrorCreateManyWithoutReqUserInput
  ClientEvent: ClientEventCreateManyWithoutReqUserInput
  createdAt: DateTime
  email: String!
  id: String
  name: String
  password: String
  posts: PostCreateManyWithoutAuthorInput
  roles: UserCreaterolesInput
  updatedAt: DateTime
}

input UserCreateWithoutApiErrorInput {
  ApiAccess: ApiAccessCreateManyWithoutReqUserInput
  ClientEvent: ClientEventCreateManyWithoutReqUserInput
  createdAt: DateTime
  email: String!
  id: String
  name: String
  password: String
  posts: PostCreateManyWithoutAuthorInput
  roles: UserCreaterolesInput
  updatedAt: DateTime
}

input UserCreateWithoutPostsInput {
  ApiAccess: ApiAccessCreateManyWithoutReqUserInput
  ApiError: ApiErrorCreateManyWithoutReqUserInput
  ClientEvent: ClientEventCreateManyWithoutReqUserInput
  createdAt: DateTime
  email: String!
  id: String
  name: String
  password: String
  roles: UserCreaterolesInput
  updatedAt: DateTime
}

input UserOrderByInput {
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  name: SortOrder
  password: SortOrder
  roles: SortOrder
  updatedAt: SortOrder
}

enum UserRole {
  ADMIN
  AUTHOR
  EDITOR
}

input UserUpdateInput {
  ApiAccess: ApiAccessUpdateManyWithoutReqUserInput
  ApiError: ApiErrorUpdateManyWithoutReqUserInput
  ClientEvent: ClientEventUpdateManyWithoutReqUserInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutAuthorInput
  roles: UserUpdaterolesInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateOneRequiredWithoutPostsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutPostsInput
  update: UserUpdateWithoutPostsDataInput
  upsert: UserUpsertWithoutPostsInput
}

input UserUpdateOneWithoutApiAccessInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutApiAccessInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutApiAccessDataInput
  upsert: UserUpsertWithoutApiAccessInput
}

input UserUpdateOneWithoutApiErrorInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutApiErrorInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutApiErrorDataInput
  upsert: UserUpsertWithoutApiErrorInput
}

input UserUpdaterolesInput {
  set: [UserRole!]!
}

input UserUpdateWithoutApiAccessDataInput {
  ApiError: ApiErrorUpdateManyWithoutReqUserInput
  ClientEvent: ClientEventUpdateManyWithoutReqUserInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutAuthorInput
  roles: UserUpdaterolesInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateWithoutApiErrorDataInput {
  ApiAccess: ApiAccessUpdateManyWithoutReqUserInput
  ClientEvent: ClientEventUpdateManyWithoutReqUserInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutAuthorInput
  roles: UserUpdaterolesInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateWithoutPostsDataInput {
  ApiAccess: ApiAccessUpdateManyWithoutReqUserInput
  ApiError: ApiErrorUpdateManyWithoutReqUserInput
  ClientEvent: ClientEventUpdateManyWithoutReqUserInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  roles: UserUpdaterolesInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpsertWithoutApiAccessInput {
  create: UserCreateWithoutApiAccessInput!
  update: UserUpdateWithoutApiAccessDataInput!
}

input UserUpsertWithoutApiErrorInput {
  create: UserCreateWithoutApiErrorInput!
  update: UserUpdateWithoutApiErrorDataInput!
}

input UserUpsertWithoutPostsInput {
  create: UserCreateWithoutPostsInput!
  update: UserUpdateWithoutPostsDataInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  ApiAccess: ApiAccessListRelationFilter
  ApiError: ApiErrorListRelationFilter
  ClientEvent: ClientEventListRelationFilter
  createdAt: DateTimeFilter
  email: StringFilter
  id: StringFilter
  name: StringNullableFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  password: StringNullableFilter
  posts: PostListRelationFilter
  roles: EnumUserRoleNullableListFilter
  updatedAt: DateTimeFilter
}

input UserWhereUniqueInput {
  email: String
  id: String
}
