### This file was generated by Nexus Schema
### Do not make changes to this file directly


type ApiAccess {
  createdAt: DateTime!
  duration: Int!
  id: String!
  ip: String!
  operationName: String!
  reqUser: User
  reqUserId: String
}

input ApiAccessCreateInput {
  createdAt: DateTime
  duration: Int!
  id: String
  ip: String!
  operationName: String!
  reqUser: UserCreateOneWithoutApiAccessInput
}

input ApiAccessCreateManyWithoutReqUserInput {
  connect: [ApiAccessWhereUniqueInput!]
  create: [ApiAccessCreateWithoutReqUserInput!]
}

input ApiAccessCreateWithoutReqUserInput {
  createdAt: DateTime
  duration: Int!
  id: String
  ip: String!
  operationName: String!
}

input ApiAccessListRelationFilter {
  every: ApiAccessWhereInput
  none: ApiAccessWhereInput
  some: ApiAccessWhereInput
}

input ApiAccessOrderByInput {
  createdAt: SortOrder
  duration: SortOrder
  id: SortOrder
  ip: SortOrder
  operationName: SortOrder
  reqUserId: SortOrder
}

input ApiAccessScalarWhereInput {
  AND: [ApiAccessScalarWhereInput!]
  createdAt: DateTimeFilter
  duration: IntFilter
  id: StringFilter
  ip: StringFilter
  NOT: [ApiAccessScalarWhereInput!]
  operationName: StringFilter
  OR: [ApiAccessScalarWhereInput!]
  reqUserId: StringNullableFilter
}

input ApiAccessUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  duration: IntFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  ip: StringFieldUpdateOperationsInput
  operationName: StringFieldUpdateOperationsInput
  reqUser: UserUpdateOneWithoutApiAccessInput
}

input ApiAccessUpdateManyDataInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  duration: IntFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  ip: StringFieldUpdateOperationsInput
  operationName: StringFieldUpdateOperationsInput
}

input ApiAccessUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  duration: IntFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  ip: StringFieldUpdateOperationsInput
  operationName: StringFieldUpdateOperationsInput
}

input ApiAccessUpdateManyWithoutReqUserInput {
  connect: [ApiAccessWhereUniqueInput!]
  create: [ApiAccessCreateWithoutReqUserInput!]
  delete: [ApiAccessWhereUniqueInput!]
  deleteMany: [ApiAccessScalarWhereInput!]
  disconnect: [ApiAccessWhereUniqueInput!]
  set: [ApiAccessWhereUniqueInput!]
  update: [ApiAccessUpdateWithWhereUniqueWithoutReqUserInput!]
  updateMany: [ApiAccessUpdateManyWithWhereNestedInput!]
  upsert: [ApiAccessUpsertWithWhereUniqueWithoutReqUserInput!]
}

input ApiAccessUpdateManyWithWhereNestedInput {
  data: ApiAccessUpdateManyDataInput!
  where: ApiAccessScalarWhereInput!
}

input ApiAccessUpdateWithoutReqUserDataInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  duration: IntFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  ip: StringFieldUpdateOperationsInput
  operationName: StringFieldUpdateOperationsInput
}

input ApiAccessUpdateWithWhereUniqueWithoutReqUserInput {
  data: ApiAccessUpdateWithoutReqUserDataInput!
  where: ApiAccessWhereUniqueInput!
}

input ApiAccessUpsertWithWhereUniqueWithoutReqUserInput {
  create: ApiAccessCreateWithoutReqUserInput!
  update: ApiAccessUpdateWithoutReqUserDataInput!
  where: ApiAccessWhereUniqueInput!
}

input ApiAccessWhereInput {
  AND: [ApiAccessWhereInput!]
  createdAt: DateTimeFilter
  duration: IntFilter
  id: StringFilter
  ip: StringFilter
  NOT: [ApiAccessWhereInput!]
  operationName: StringFilter
  OR: [ApiAccessWhereInput!]
  reqUser: UserWhereInput
  reqUserId: StringNullableFilter
}

input ApiAccessWhereUniqueInput {
  id: String
}

type ApiError {
  createdAt: DateTime!
  id: String!
  ip: String!
  message: String!
  operationName: String!
  reqBody: Json!
  reqUser: User
  reqUserId: String
  resBody: Json!
  stack: Json!
}

input ApiErrorCreateInput {
  createdAt: DateTime
  id: String
  ip: String!
  message: String!
  operationName: String!
  reqBody: Json!
  reqUser: UserCreateOneWithoutApiErrorInput
  resBody: Json!
  stack: Json!
}

input ApiErrorCreateManyWithoutReqUserInput {
  connect: [ApiErrorWhereUniqueInput!]
  create: [ApiErrorCreateWithoutReqUserInput!]
}

input ApiErrorCreateWithoutReqUserInput {
  createdAt: DateTime
  id: String
  ip: String!
  message: String!
  operationName: String!
  reqBody: Json!
  resBody: Json!
  stack: Json!
}

input ApiErrorListRelationFilter {
  every: ApiErrorWhereInput
  none: ApiErrorWhereInput
  some: ApiErrorWhereInput
}

input ApiErrorOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  ip: SortOrder
  message: SortOrder
  operationName: SortOrder
  reqBody: SortOrder
  reqUserId: SortOrder
  resBody: SortOrder
  stack: SortOrder
}

input ApiErrorScalarWhereInput {
  AND: [ApiErrorScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  ip: StringFilter
  message: StringFilter
  NOT: [ApiErrorScalarWhereInput!]
  operationName: StringFilter
  OR: [ApiErrorScalarWhereInput!]
  reqUserId: StringNullableFilter
}

input ApiErrorUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  ip: StringFieldUpdateOperationsInput
  message: StringFieldUpdateOperationsInput
  operationName: StringFieldUpdateOperationsInput
  reqBody: Json
  reqUser: UserUpdateOneWithoutApiErrorInput
  resBody: Json
  stack: Json
}

input ApiErrorUpdateManyDataInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  ip: StringFieldUpdateOperationsInput
  message: StringFieldUpdateOperationsInput
  operationName: StringFieldUpdateOperationsInput
  reqBody: Json
  resBody: Json
  stack: Json
}

input ApiErrorUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  ip: StringFieldUpdateOperationsInput
  message: StringFieldUpdateOperationsInput
  operationName: StringFieldUpdateOperationsInput
  reqBody: Json
  resBody: Json
  stack: Json
}

input ApiErrorUpdateManyWithoutReqUserInput {
  connect: [ApiErrorWhereUniqueInput!]
  create: [ApiErrorCreateWithoutReqUserInput!]
  delete: [ApiErrorWhereUniqueInput!]
  deleteMany: [ApiErrorScalarWhereInput!]
  disconnect: [ApiErrorWhereUniqueInput!]
  set: [ApiErrorWhereUniqueInput!]
  update: [ApiErrorUpdateWithWhereUniqueWithoutReqUserInput!]
  updateMany: [ApiErrorUpdateManyWithWhereNestedInput!]
  upsert: [ApiErrorUpsertWithWhereUniqueWithoutReqUserInput!]
}

input ApiErrorUpdateManyWithWhereNestedInput {
  data: ApiErrorUpdateManyDataInput!
  where: ApiErrorScalarWhereInput!
}

input ApiErrorUpdateWithoutReqUserDataInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  ip: StringFieldUpdateOperationsInput
  message: StringFieldUpdateOperationsInput
  operationName: StringFieldUpdateOperationsInput
  reqBody: Json
  resBody: Json
  stack: Json
}

input ApiErrorUpdateWithWhereUniqueWithoutReqUserInput {
  data: ApiErrorUpdateWithoutReqUserDataInput!
  where: ApiErrorWhereUniqueInput!
}

input ApiErrorUpsertWithWhereUniqueWithoutReqUserInput {
  create: ApiErrorCreateWithoutReqUserInput!
  update: ApiErrorUpdateWithoutReqUserDataInput!
  where: ApiErrorWhereUniqueInput!
}

input ApiErrorWhereInput {
  AND: [ApiErrorWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  ip: StringFilter
  message: StringFilter
  NOT: [ApiErrorWhereInput!]
  operationName: StringFilter
  OR: [ApiErrorWhereInput!]
  reqUser: UserWhereInput
  reqUserId: StringNullableFilter
}

input ApiErrorWhereUniqueInput {
  id: String
}

input AuthInputType {
  email: String!
  password: String!
}

input AuthRefreshInputType {
  refreshToken: String!
}

type BatchPayload {
  count: Int!
}

type ClientEvent {
  context: Json
  createdAt: DateTime!
  id: String!
  ip: String!
  name: String!
  reqUser: User
  reqUserId: String
  userAgent: String!
}

input ClientEventCreateInput {
  context: Json
  createdAt: DateTime
  id: String
  ip: String!
  name: String!
  reqUser: UserCreateOneWithoutClientEventInput
  userAgent: String!
}

input ClientEventCreateManyWithoutReqUserInput {
  connect: [ClientEventWhereUniqueInput!]
  create: [ClientEventCreateWithoutReqUserInput!]
}

input ClientEventCreateWithoutReqUserInput {
  context: Json
  createdAt: DateTime
  id: String
  ip: String!
  name: String!
  userAgent: String!
}

input ClientEventListRelationFilter {
  every: ClientEventWhereInput
  none: ClientEventWhereInput
  some: ClientEventWhereInput
}

input ClientEventOrderByInput {
  context: SortOrder
  createdAt: SortOrder
  id: SortOrder
  ip: SortOrder
  name: SortOrder
  reqUserId: SortOrder
  userAgent: SortOrder
}

input ClientEventScalarWhereInput {
  AND: [ClientEventScalarWhereInput!]
  context: JsonNullableFilter
  createdAt: DateTimeFilter
  id: StringFilter
  ip: StringFilter
  name: StringFilter
  NOT: [ClientEventScalarWhereInput!]
  OR: [ClientEventScalarWhereInput!]
  reqUserId: StringNullableFilter
  userAgent: StringFilter
}

input ClientEventUpdateInput {
  context: Json
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  ip: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  reqUser: UserUpdateOneWithoutClientEventInput
  userAgent: StringFieldUpdateOperationsInput
}

input ClientEventUpdateManyDataInput {
  context: Json
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  ip: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  userAgent: StringFieldUpdateOperationsInput
}

input ClientEventUpdateManyMutationInput {
  context: Json
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  ip: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  userAgent: StringFieldUpdateOperationsInput
}

input ClientEventUpdateManyWithoutReqUserInput {
  connect: [ClientEventWhereUniqueInput!]
  create: [ClientEventCreateWithoutReqUserInput!]
  delete: [ClientEventWhereUniqueInput!]
  deleteMany: [ClientEventScalarWhereInput!]
  disconnect: [ClientEventWhereUniqueInput!]
  set: [ClientEventWhereUniqueInput!]
  update: [ClientEventUpdateWithWhereUniqueWithoutReqUserInput!]
  updateMany: [ClientEventUpdateManyWithWhereNestedInput!]
  upsert: [ClientEventUpsertWithWhereUniqueWithoutReqUserInput!]
}

input ClientEventUpdateManyWithWhereNestedInput {
  data: ClientEventUpdateManyDataInput!
  where: ClientEventScalarWhereInput!
}

input ClientEventUpdateWithoutReqUserDataInput {
  context: Json
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  ip: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  userAgent: StringFieldUpdateOperationsInput
}

input ClientEventUpdateWithWhereUniqueWithoutReqUserInput {
  data: ClientEventUpdateWithoutReqUserDataInput!
  where: ClientEventWhereUniqueInput!
}

input ClientEventUpsertWithWhereUniqueWithoutReqUserInput {
  create: ClientEventCreateWithoutReqUserInput!
  update: ClientEventUpdateWithoutReqUserDataInput!
  where: ClientEventWhereUniqueInput!
}

input ClientEventWhereInput {
  AND: [ClientEventWhereInput!]
  context: JsonNullableFilter
  createdAt: DateTimeFilter
  id: StringFilter
  ip: StringFilter
  name: StringFilter
  NOT: [ClientEventWhereInput!]
  OR: [ClientEventWhereInput!]
  reqUser: UserWhereInput
  reqUserId: StringNullableFilter
  userAgent: StringFilter
}

input ClientEventWhereUniqueInput {
  id: String
}

scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input EnumPostStatusFieldUpdateOperationsInput {
  set: PostStatus
}

input EnumPostStatusFilter {
  equals: PostStatus
  in: [PostStatus!]
  not: NestedEnumPostStatusFilter
  notIn: [PostStatus!]
}

input EnumUserRoleNullableListFilter {
  equals: [UserRole!]
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

scalar Json

input JsonNullableFilter {
  equals: Json
  not: Json
}

type Mutation {
  createOneApiAccess(data: ApiAccessCreateInput!): ApiAccess!
  createOneApiError(data: ApiErrorCreateInput!): ApiError!
  createOneClientEvent(data: ClientEventCreateInput!): ClientEvent!
  createOnePost(data: PostCreateInput!): Post!
  createOneTag(data: TagCreateInput!): Tag!
  createOneUser(data: UserCreateInput!): User!
  deleteManyApiAccess(where: ApiAccessWhereInput): BatchPayload!
  deleteManyApiError(where: ApiErrorWhereInput): BatchPayload!
  deleteManyClientEvent(where: ClientEventWhereInput): BatchPayload!
  deleteManyPost(where: PostWhereInput): BatchPayload!
  deleteManyTag(where: TagWhereInput): BatchPayload!
  deleteManyUser(where: UserWhereInput): BatchPayload!
  deleteOneApiAccess(where: ApiAccessWhereUniqueInput!): ApiAccess
  deleteOneApiError(where: ApiErrorWhereUniqueInput!): ApiError
  deleteOneClientEvent(where: ClientEventWhereUniqueInput!): ClientEvent
  deleteOnePost(where: PostWhereUniqueInput!): Post
  deleteOneTag(where: TagWhereUniqueInput!): Tag
  deleteOneUser(where: UserWhereUniqueInput!): User
  updateManyApiAccess(data: ApiAccessUpdateManyMutationInput!, where: ApiAccessWhereInput): BatchPayload!
  updateManyApiError(data: ApiErrorUpdateManyMutationInput!, where: ApiErrorWhereInput): BatchPayload!
  updateManyClientEvent(data: ClientEventUpdateManyMutationInput!, where: ClientEventWhereInput): BatchPayload!
  updateManyPost(data: PostUpdateManyMutationInput!, where: PostWhereInput): BatchPayload!
  updateManyTag(data: TagUpdateManyMutationInput!, where: TagWhereInput): BatchPayload!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateOneApiAccess(data: ApiAccessUpdateInput!, where: ApiAccessWhereUniqueInput!): ApiAccess
  updateOneApiError(data: ApiErrorUpdateInput!, where: ApiErrorWhereUniqueInput!): ApiError
  updateOneClientEvent(data: ClientEventUpdateInput!, where: ClientEventWhereUniqueInput!): ClientEvent
  updateOnePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateOneTag(data: TagUpdateInput!, where: TagWhereUniqueInput!): Tag
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedEnumPostStatusFilter {
  equals: PostStatus
  in: [PostStatus!]
  not: NestedEnumPostStatusFilter
  notIn: [PostStatus!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Post {
  author: User!
  authorId: String!
  createdAt: DateTime!
  createdBy: User
  createdById: String
  id: String!
  status: PostStatus!
  tags(after: TagWhereUniqueInput, before: TagWhereUniqueInput, first: Int, last: Int): [Tag!]!
  title: String!
  updatedAt: DateTime!
  updatedBy: User
  updatedById: String
}

input PostCreateInput {
  createdAt: DateTime
  id: String
  status: PostStatus!
  tags: TagCreateManyWithoutPostInput
  title: String!
  updatedAt: DateTime
}

input PostCreateManyWithoutAuthorInput {
  connect: [PostWhereUniqueInput!]
  create: [PostCreateWithoutAuthorInput!]
}

input PostCreateManyWithoutCreatedByInput {
  connect: [PostWhereUniqueInput!]
  create: [PostCreateWithoutCreatedByInput!]
}

input PostCreateManyWithoutUpdatedByInput {
  connect: [PostWhereUniqueInput!]
  create: [PostCreateWithoutUpdatedByInput!]
}

input PostCreateOneWithoutTagsInput {
  connect: PostWhereUniqueInput
  create: PostCreateWithoutTagsInput
}

input PostCreateWithoutAuthorInput {
  createdAt: DateTime
  createdBy: UserCreateOneWithoutPostsCreatedJInput
  id: String
  status: PostStatus!
  tags: TagCreateManyWithoutPostInput
  title: String!
  updatedAt: DateTime
  updatedBy: UserCreateOneWithoutPostsUpdatedJInput
}

input PostCreateWithoutCreatedByInput {
  author: UserCreateOneWithoutPostsAuthoredJInput!
  createdAt: DateTime
  id: String
  status: PostStatus!
  tags: TagCreateManyWithoutPostInput
  title: String!
  updatedAt: DateTime
  updatedBy: UserCreateOneWithoutPostsUpdatedJInput
}

input PostCreateWithoutTagsInput {
  author: UserCreateOneWithoutPostsAuthoredJInput!
  createdAt: DateTime
  createdBy: UserCreateOneWithoutPostsCreatedJInput
  id: String
  status: PostStatus!
  title: String!
  updatedAt: DateTime
  updatedBy: UserCreateOneWithoutPostsUpdatedJInput
}

input PostCreateWithoutUpdatedByInput {
  author: UserCreateOneWithoutPostsAuthoredJInput!
  createdAt: DateTime
  createdBy: UserCreateOneWithoutPostsCreatedJInput
  id: String
  status: PostStatus!
  tags: TagCreateManyWithoutPostInput
  title: String!
  updatedAt: DateTime
}

input PostListRelationFilter {
  every: PostWhereInput
  none: PostWhereInput
  some: PostWhereInput
}

input PostOrderByInput {
  authorId: SortOrder
  createdAt: SortOrder
  createdById: SortOrder
  id: SortOrder
  status: SortOrder
  title: SortOrder
  updatedAt: SortOrder
  updatedById: SortOrder
}

input PostScalarWhereInput {
  AND: [PostScalarWhereInput!]
  authorId: StringFilter
  createdAt: DateTimeFilter
  createdById: StringNullableFilter
  id: StringFilter
  NOT: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  status: EnumPostStatusFilter
  title: StringFilter
  updatedAt: DateTimeFilter
  updatedById: StringNullableFilter
}

enum PostStatus {
  DRAFT
  PUBLISHED
}

input PostUpdateInput {
  author: UserUpdateOneRequiredWithoutPostsAuthoredJInput
  createdAt: DateTimeFieldUpdateOperationsInput
  createdBy: UserUpdateOneWithoutPostsCreatedJInput
  id: StringFieldUpdateOperationsInput
  status: EnumPostStatusFieldUpdateOperationsInput
  tags: TagUpdateManyWithoutPostInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PostUpdateManyDataInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  status: EnumPostStatusFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PostUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  status: EnumPostStatusFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PostUpdateManyWithoutAuthorInput {
  connect: [PostWhereUniqueInput!]
  create: [PostCreateWithoutAuthorInput!]
  delete: [PostWhereUniqueInput!]
  deleteMany: [PostScalarWhereInput!]
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutAuthorInput!]
}

input PostUpdateManyWithoutCreatedByInput {
  connect: [PostWhereUniqueInput!]
  create: [PostCreateWithoutCreatedByInput!]
  delete: [PostWhereUniqueInput!]
  deleteMany: [PostScalarWhereInput!]
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutCreatedByInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutCreatedByInput!]
}

input PostUpdateManyWithoutUpdatedByInput {
  connect: [PostWhereUniqueInput!]
  create: [PostCreateWithoutUpdatedByInput!]
  delete: [PostWhereUniqueInput!]
  deleteMany: [PostScalarWhereInput!]
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutUpdatedByInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutUpdatedByInput!]
}

input PostUpdateManyWithWhereNestedInput {
  data: PostUpdateManyDataInput!
  where: PostScalarWhereInput!
}

input PostUpdateOneWithoutTagsInput {
  connect: PostWhereUniqueInput
  create: PostCreateWithoutTagsInput
  delete: Boolean
  disconnect: Boolean
  update: PostUpdateWithoutTagsDataInput
  upsert: PostUpsertWithoutTagsInput
}

input PostUpdateWithoutAuthorDataInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  createdBy: UserUpdateOneWithoutPostsCreatedJInput
  id: StringFieldUpdateOperationsInput
  status: EnumPostStatusFieldUpdateOperationsInput
  tags: TagUpdateManyWithoutPostInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  updatedBy: UserUpdateOneWithoutPostsUpdatedJInput
}

input PostUpdateWithoutCreatedByDataInput {
  author: UserUpdateOneRequiredWithoutPostsAuthoredJInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  status: EnumPostStatusFieldUpdateOperationsInput
  tags: TagUpdateManyWithoutPostInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  updatedBy: UserUpdateOneWithoutPostsUpdatedJInput
}

input PostUpdateWithoutTagsDataInput {
  author: UserUpdateOneRequiredWithoutPostsAuthoredJInput
  createdAt: DateTimeFieldUpdateOperationsInput
  createdBy: UserUpdateOneWithoutPostsCreatedJInput
  id: StringFieldUpdateOperationsInput
  status: EnumPostStatusFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  updatedBy: UserUpdateOneWithoutPostsUpdatedJInput
}

input PostUpdateWithoutUpdatedByDataInput {
  author: UserUpdateOneRequiredWithoutPostsAuthoredJInput
  createdAt: DateTimeFieldUpdateOperationsInput
  createdBy: UserUpdateOneWithoutPostsCreatedJInput
  id: StringFieldUpdateOperationsInput
  status: EnumPostStatusFieldUpdateOperationsInput
  tags: TagUpdateManyWithoutPostInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PostUpdateWithWhereUniqueWithoutAuthorInput {
  data: PostUpdateWithoutAuthorDataInput!
  where: PostWhereUniqueInput!
}

input PostUpdateWithWhereUniqueWithoutCreatedByInput {
  data: PostUpdateWithoutCreatedByDataInput!
  where: PostWhereUniqueInput!
}

input PostUpdateWithWhereUniqueWithoutUpdatedByInput {
  data: PostUpdateWithoutUpdatedByDataInput!
  where: PostWhereUniqueInput!
}

input PostUpsertWithoutTagsInput {
  create: PostCreateWithoutTagsInput!
  update: PostUpdateWithoutTagsDataInput!
}

input PostUpsertWithWhereUniqueWithoutAuthorInput {
  create: PostCreateWithoutAuthorInput!
  update: PostUpdateWithoutAuthorDataInput!
  where: PostWhereUniqueInput!
}

input PostUpsertWithWhereUniqueWithoutCreatedByInput {
  create: PostCreateWithoutCreatedByInput!
  update: PostUpdateWithoutCreatedByDataInput!
  where: PostWhereUniqueInput!
}

input PostUpsertWithWhereUniqueWithoutUpdatedByInput {
  create: PostCreateWithoutUpdatedByInput!
  update: PostUpdateWithoutUpdatedByDataInput!
  where: PostWhereUniqueInput!
}

input PostWhereInput {
  AND: [PostWhereInput!]
  author: UserWhereInput
  authorId: StringFilter
  createdAt: DateTimeFilter
  createdBy: UserWhereInput
  createdById: StringNullableFilter
  id: StringFilter
  NOT: [PostWhereInput!]
  OR: [PostWhereInput!]
  status: EnumPostStatusFilter
  tags: TagListRelationFilter
  title: StringFilter
  updatedAt: DateTimeFilter
  updatedBy: UserWhereInput
  updatedById: StringNullableFilter
}

input PostWhereUniqueInput {
  id: String
}

type Query {
  apiAccess(where: ApiAccessWhereUniqueInput!): ApiAccess
  apiAccesses(after: ApiAccessWhereUniqueInput, before: ApiAccessWhereUniqueInput, first: Int, last: Int, orderBy: [ApiAccessOrderByInput!], where: ApiAccessWhereInput): [ApiAccess!]!
  apiError(where: ApiErrorWhereUniqueInput!): ApiError
  apiErrors(after: ApiErrorWhereUniqueInput, before: ApiErrorWhereUniqueInput, first: Int, last: Int, orderBy: [ApiErrorOrderByInput!], where: ApiErrorWhereInput): [ApiError!]!
  auth(data: AuthInputType!): Token
  authRefresh(data: AuthRefreshInputType!): Token
  clientEvent(where: ClientEventWhereUniqueInput!): ClientEvent
  clientEvents(after: ClientEventWhereUniqueInput, before: ClientEventWhereUniqueInput, first: Int, last: Int, orderBy: [ClientEventOrderByInput!], where: ClientEventWhereInput): [ClientEvent!]!
  post(where: PostWhereUniqueInput!): Post
  posts(after: PostWhereUniqueInput, before: PostWhereUniqueInput, first: Int, last: Int, orderBy: [PostOrderByInput!], where: PostWhereInput): [Post!]!
  tag(where: TagWhereUniqueInput!): Tag
  tags(after: TagWhereUniqueInput, before: TagWhereUniqueInput, first: Int, last: Int, orderBy: [TagOrderByInput!], where: TagWhereInput): [Tag!]!
  user(where: UserWhereUniqueInput!): User
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int, orderBy: [UserOrderByInput!], where: UserWhereInput): [User!]!
}

enum QueryMode {
  default
  insensitive
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Tag {
  createdAt: DateTime!
  id: Int!
  post: Post
  postId: String
  updatedAt: DateTime!
  value: String!
}

input TagCreateInput {
  createdAt: DateTime
  post: PostCreateOneWithoutTagsInput
  updatedAt: DateTime
  value: String!
}

input TagCreateManyWithoutPostInput {
  connect: [TagWhereUniqueInput!]
  create: [TagCreateWithoutPostInput!]
}

input TagCreateWithoutPostInput {
  createdAt: DateTime
  updatedAt: DateTime
  value: String!
}

input TagListRelationFilter {
  every: TagWhereInput
  none: TagWhereInput
  some: TagWhereInput
}

input TagOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  postId: SortOrder
  updatedAt: SortOrder
  value: SortOrder
}

input TagScalarWhereInput {
  AND: [TagScalarWhereInput!]
  createdAt: DateTimeFilter
  id: IntFilter
  NOT: [TagScalarWhereInput!]
  OR: [TagScalarWhereInput!]
  postId: StringNullableFilter
  updatedAt: DateTimeFilter
  value: StringFilter
}

input TagUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  post: PostUpdateOneWithoutTagsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  value: StringFieldUpdateOperationsInput
}

input TagUpdateManyDataInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  value: StringFieldUpdateOperationsInput
}

input TagUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  value: StringFieldUpdateOperationsInput
}

input TagUpdateManyWithoutPostInput {
  connect: [TagWhereUniqueInput!]
  create: [TagCreateWithoutPostInput!]
  delete: [TagWhereUniqueInput!]
  deleteMany: [TagScalarWhereInput!]
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  update: [TagUpdateWithWhereUniqueWithoutPostInput!]
  updateMany: [TagUpdateManyWithWhereNestedInput!]
  upsert: [TagUpsertWithWhereUniqueWithoutPostInput!]
}

input TagUpdateManyWithWhereNestedInput {
  data: TagUpdateManyDataInput!
  where: TagScalarWhereInput!
}

input TagUpdateWithoutPostDataInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  value: StringFieldUpdateOperationsInput
}

input TagUpdateWithWhereUniqueWithoutPostInput {
  data: TagUpdateWithoutPostDataInput!
  where: TagWhereUniqueInput!
}

input TagUpsertWithWhereUniqueWithoutPostInput {
  create: TagCreateWithoutPostInput!
  update: TagUpdateWithoutPostDataInput!
  where: TagWhereUniqueInput!
}

input TagWhereInput {
  AND: [TagWhereInput!]
  createdAt: DateTimeFilter
  id: IntFilter
  NOT: [TagWhereInput!]
  OR: [TagWhereInput!]
  post: PostWhereInput
  postId: StringNullableFilter
  updatedAt: DateTimeFilter
  value: StringFilter
}

input TagWhereUniqueInput {
  id: Int
}

type Token {
  accessToken: String
  refreshToken: String
  roles: [String]
  userId: String
}

type User {
  ApiAccess(after: ApiAccessWhereUniqueInput, before: ApiAccessWhereUniqueInput, first: Int, last: Int): [ApiAccess!]!
  ApiError(after: ApiErrorWhereUniqueInput, before: ApiErrorWhereUniqueInput, first: Int, last: Int): [ApiError!]!
  ClientEvent(after: ClientEventWhereUniqueInput, before: ClientEventWhereUniqueInput, first: Int, last: Int): [ClientEvent!]!
  createdAt: DateTime!
  createdBy: User
  createdById: String
  email: String!
  id: String!
  name: String!
  password: String
  postsAuthoredJ(after: PostWhereUniqueInput, before: PostWhereUniqueInput, first: Int, last: Int, orderBy: [PostOrderByInput!], where: PostWhereInput): [Post!]!
  postsCreatedJ(after: PostWhereUniqueInput, before: PostWhereUniqueInput, first: Int, last: Int, orderBy: [PostOrderByInput!], where: PostWhereInput): [Post!]!
  postsUpdatedJ(after: PostWhereUniqueInput, before: PostWhereUniqueInput, first: Int, last: Int, orderBy: [PostOrderByInput!], where: PostWhereInput): [Post!]!
  roles: [UserRole!]!
  updatedAt: DateTime!
  updatedBy: User
  updatedById: String
  usersCreated(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
  usersUpdated(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
}

input UserCreateInput {
  ApiAccess: ApiAccessCreateManyWithoutReqUserInput
  ApiError: ApiErrorCreateManyWithoutReqUserInput
  ClientEvent: ClientEventCreateManyWithoutReqUserInput
  createdAt: DateTime
  createdBy: UserCreateOneWithoutUsersCreatedInput
  email: String!
  id: String
  name: String!
  password: String
  postsAuthoredJ: PostCreateManyWithoutAuthorInput
  postsCreatedJ: PostCreateManyWithoutCreatedByInput
  postsUpdatedJ: PostCreateManyWithoutUpdatedByInput
  roles: UserCreaterolesInput
  updatedAt: DateTime
  updatedBy: UserCreateOneWithoutUsersUpdatedInput
  usersCreated: UserCreateManyWithoutCreatedByInput
  usersUpdated: UserCreateManyWithoutUpdatedByInput
}

input UserCreateManyWithoutCreatedByInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutCreatedByInput!]
}

input UserCreateManyWithoutUpdatedByInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutUpdatedByInput!]
}

input UserCreateOneWithoutApiAccessInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutApiAccessInput
}

input UserCreateOneWithoutApiErrorInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutApiErrorInput
}

input UserCreateOneWithoutClientEventInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutClientEventInput
}

input UserCreateOneWithoutPostsAuthoredJInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutPostsAuthoredJInput
}

input UserCreateOneWithoutPostsCreatedJInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutPostsCreatedJInput
}

input UserCreateOneWithoutPostsUpdatedJInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutPostsUpdatedJInput
}

input UserCreateOneWithoutUsersCreatedInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutUsersCreatedInput
}

input UserCreateOneWithoutUsersUpdatedInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutUsersUpdatedInput
}

input UserCreaterolesInput {
  set: [UserRole!]!
}

input UserCreateWithoutApiAccessInput {
  ApiError: ApiErrorCreateManyWithoutReqUserInput
  ClientEvent: ClientEventCreateManyWithoutReqUserInput
  createdAt: DateTime
  createdBy: UserCreateOneWithoutUsersCreatedInput
  email: String!
  id: String
  name: String!
  password: String
  postsAuthoredJ: PostCreateManyWithoutAuthorInput
  postsCreatedJ: PostCreateManyWithoutCreatedByInput
  postsUpdatedJ: PostCreateManyWithoutUpdatedByInput
  roles: UserCreaterolesInput
  updatedAt: DateTime
  updatedBy: UserCreateOneWithoutUsersUpdatedInput
  usersCreated: UserCreateManyWithoutCreatedByInput
  usersUpdated: UserCreateManyWithoutUpdatedByInput
}

input UserCreateWithoutApiErrorInput {
  ApiAccess: ApiAccessCreateManyWithoutReqUserInput
  ClientEvent: ClientEventCreateManyWithoutReqUserInput
  createdAt: DateTime
  createdBy: UserCreateOneWithoutUsersCreatedInput
  email: String!
  id: String
  name: String!
  password: String
  postsAuthoredJ: PostCreateManyWithoutAuthorInput
  postsCreatedJ: PostCreateManyWithoutCreatedByInput
  postsUpdatedJ: PostCreateManyWithoutUpdatedByInput
  roles: UserCreaterolesInput
  updatedAt: DateTime
  updatedBy: UserCreateOneWithoutUsersUpdatedInput
  usersCreated: UserCreateManyWithoutCreatedByInput
  usersUpdated: UserCreateManyWithoutUpdatedByInput
}

input UserCreateWithoutClientEventInput {
  ApiAccess: ApiAccessCreateManyWithoutReqUserInput
  ApiError: ApiErrorCreateManyWithoutReqUserInput
  createdAt: DateTime
  createdBy: UserCreateOneWithoutUsersCreatedInput
  email: String!
  id: String
  name: String!
  password: String
  postsAuthoredJ: PostCreateManyWithoutAuthorInput
  postsCreatedJ: PostCreateManyWithoutCreatedByInput
  postsUpdatedJ: PostCreateManyWithoutUpdatedByInput
  roles: UserCreaterolesInput
  updatedAt: DateTime
  updatedBy: UserCreateOneWithoutUsersUpdatedInput
  usersCreated: UserCreateManyWithoutCreatedByInput
  usersUpdated: UserCreateManyWithoutUpdatedByInput
}

input UserCreateWithoutCreatedByInput {
  ApiAccess: ApiAccessCreateManyWithoutReqUserInput
  ApiError: ApiErrorCreateManyWithoutReqUserInput
  ClientEvent: ClientEventCreateManyWithoutReqUserInput
  createdAt: DateTime
  email: String!
  id: String
  name: String!
  password: String
  postsAuthoredJ: PostCreateManyWithoutAuthorInput
  postsCreatedJ: PostCreateManyWithoutCreatedByInput
  postsUpdatedJ: PostCreateManyWithoutUpdatedByInput
  roles: UserCreaterolesInput
  updatedAt: DateTime
  updatedBy: UserCreateOneWithoutUsersUpdatedInput
  usersCreated: UserCreateManyWithoutCreatedByInput
  usersUpdated: UserCreateManyWithoutUpdatedByInput
}

input UserCreateWithoutPostsAuthoredJInput {
  ApiAccess: ApiAccessCreateManyWithoutReqUserInput
  ApiError: ApiErrorCreateManyWithoutReqUserInput
  ClientEvent: ClientEventCreateManyWithoutReqUserInput
  createdAt: DateTime
  createdBy: UserCreateOneWithoutUsersCreatedInput
  email: String!
  id: String
  name: String!
  password: String
  postsCreatedJ: PostCreateManyWithoutCreatedByInput
  postsUpdatedJ: PostCreateManyWithoutUpdatedByInput
  roles: UserCreaterolesInput
  updatedAt: DateTime
  updatedBy: UserCreateOneWithoutUsersUpdatedInput
  usersCreated: UserCreateManyWithoutCreatedByInput
  usersUpdated: UserCreateManyWithoutUpdatedByInput
}

input UserCreateWithoutPostsCreatedJInput {
  ApiAccess: ApiAccessCreateManyWithoutReqUserInput
  ApiError: ApiErrorCreateManyWithoutReqUserInput
  ClientEvent: ClientEventCreateManyWithoutReqUserInput
  createdAt: DateTime
  createdBy: UserCreateOneWithoutUsersCreatedInput
  email: String!
  id: String
  name: String!
  password: String
  postsAuthoredJ: PostCreateManyWithoutAuthorInput
  postsUpdatedJ: PostCreateManyWithoutUpdatedByInput
  roles: UserCreaterolesInput
  updatedAt: DateTime
  updatedBy: UserCreateOneWithoutUsersUpdatedInput
  usersCreated: UserCreateManyWithoutCreatedByInput
  usersUpdated: UserCreateManyWithoutUpdatedByInput
}

input UserCreateWithoutPostsUpdatedJInput {
  ApiAccess: ApiAccessCreateManyWithoutReqUserInput
  ApiError: ApiErrorCreateManyWithoutReqUserInput
  ClientEvent: ClientEventCreateManyWithoutReqUserInput
  createdAt: DateTime
  createdBy: UserCreateOneWithoutUsersCreatedInput
  email: String!
  id: String
  name: String!
  password: String
  postsAuthoredJ: PostCreateManyWithoutAuthorInput
  postsCreatedJ: PostCreateManyWithoutCreatedByInput
  roles: UserCreaterolesInput
  updatedAt: DateTime
  updatedBy: UserCreateOneWithoutUsersUpdatedInput
  usersCreated: UserCreateManyWithoutCreatedByInput
  usersUpdated: UserCreateManyWithoutUpdatedByInput
}

input UserCreateWithoutUpdatedByInput {
  ApiAccess: ApiAccessCreateManyWithoutReqUserInput
  ApiError: ApiErrorCreateManyWithoutReqUserInput
  ClientEvent: ClientEventCreateManyWithoutReqUserInput
  createdAt: DateTime
  createdBy: UserCreateOneWithoutUsersCreatedInput
  email: String!
  id: String
  name: String!
  password: String
  postsAuthoredJ: PostCreateManyWithoutAuthorInput
  postsCreatedJ: PostCreateManyWithoutCreatedByInput
  postsUpdatedJ: PostCreateManyWithoutUpdatedByInput
  roles: UserCreaterolesInput
  updatedAt: DateTime
  usersCreated: UserCreateManyWithoutCreatedByInput
  usersUpdated: UserCreateManyWithoutUpdatedByInput
}

input UserCreateWithoutUsersCreatedInput {
  ApiAccess: ApiAccessCreateManyWithoutReqUserInput
  ApiError: ApiErrorCreateManyWithoutReqUserInput
  ClientEvent: ClientEventCreateManyWithoutReqUserInput
  createdAt: DateTime
  createdBy: UserCreateOneWithoutUsersCreatedInput
  email: String!
  id: String
  name: String!
  password: String
  postsAuthoredJ: PostCreateManyWithoutAuthorInput
  postsCreatedJ: PostCreateManyWithoutCreatedByInput
  postsUpdatedJ: PostCreateManyWithoutUpdatedByInput
  roles: UserCreaterolesInput
  updatedAt: DateTime
  updatedBy: UserCreateOneWithoutUsersUpdatedInput
  usersUpdated: UserCreateManyWithoutUpdatedByInput
}

input UserCreateWithoutUsersUpdatedInput {
  ApiAccess: ApiAccessCreateManyWithoutReqUserInput
  ApiError: ApiErrorCreateManyWithoutReqUserInput
  ClientEvent: ClientEventCreateManyWithoutReqUserInput
  createdAt: DateTime
  createdBy: UserCreateOneWithoutUsersCreatedInput
  email: String!
  id: String
  name: String!
  password: String
  postsAuthoredJ: PostCreateManyWithoutAuthorInput
  postsCreatedJ: PostCreateManyWithoutCreatedByInput
  postsUpdatedJ: PostCreateManyWithoutUpdatedByInput
  roles: UserCreaterolesInput
  updatedAt: DateTime
  updatedBy: UserCreateOneWithoutUsersUpdatedInput
  usersCreated: UserCreateManyWithoutCreatedByInput
}

input UserListRelationFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

input UserOrderByInput {
  createdAt: SortOrder
  createdById: SortOrder
  email: SortOrder
  id: SortOrder
  name: SortOrder
  password: SortOrder
  roles: SortOrder
  updatedAt: SortOrder
  updatedById: SortOrder
}

enum UserRole {
  ADMIN
  AUTHOR
  EDITOR
}

input UserScalarWhereInput {
  AND: [UserScalarWhereInput!]
  createdAt: DateTimeFilter
  createdById: StringNullableFilter
  email: StringFilter
  id: StringFilter
  name: StringFilter
  NOT: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  password: StringNullableFilter
  roles: EnumUserRoleNullableListFilter
  updatedAt: DateTimeFilter
  updatedById: StringNullableFilter
}

input UserUpdateInput {
  ApiAccess: ApiAccessUpdateManyWithoutReqUserInput
  ApiError: ApiErrorUpdateManyWithoutReqUserInput
  ClientEvent: ClientEventUpdateManyWithoutReqUserInput
  createdAt: DateTimeFieldUpdateOperationsInput
  createdBy: UserUpdateOneWithoutUsersCreatedInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  postsAuthoredJ: PostUpdateManyWithoutAuthorInput
  postsCreatedJ: PostUpdateManyWithoutCreatedByInput
  postsUpdatedJ: PostUpdateManyWithoutUpdatedByInput
  roles: UserUpdaterolesInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  updatedBy: UserUpdateOneWithoutUsersUpdatedInput
  usersCreated: UserUpdateManyWithoutCreatedByInput
  usersUpdated: UserUpdateManyWithoutUpdatedByInput
}

input UserUpdateManyDataInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  roles: UserUpdaterolesInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  roles: UserUpdaterolesInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateManyWithoutCreatedByInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutCreatedByInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutCreatedByInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutCreatedByInput!]
}

input UserUpdateManyWithoutUpdatedByInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutUpdatedByInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutUpdatedByInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutUpdatedByInput!]
}

input UserUpdateManyWithWhereNestedInput {
  data: UserUpdateManyDataInput!
  where: UserScalarWhereInput!
}

input UserUpdateOneRequiredWithoutPostsAuthoredJInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutPostsAuthoredJInput
  update: UserUpdateWithoutPostsAuthoredJDataInput
  upsert: UserUpsertWithoutPostsAuthoredJInput
}

input UserUpdateOneWithoutApiAccessInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutApiAccessInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutApiAccessDataInput
  upsert: UserUpsertWithoutApiAccessInput
}

input UserUpdateOneWithoutApiErrorInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutApiErrorInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutApiErrorDataInput
  upsert: UserUpsertWithoutApiErrorInput
}

input UserUpdateOneWithoutClientEventInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutClientEventInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutClientEventDataInput
  upsert: UserUpsertWithoutClientEventInput
}

input UserUpdateOneWithoutPostsCreatedJInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutPostsCreatedJInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutPostsCreatedJDataInput
  upsert: UserUpsertWithoutPostsCreatedJInput
}

input UserUpdateOneWithoutPostsUpdatedJInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutPostsUpdatedJInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutPostsUpdatedJDataInput
  upsert: UserUpsertWithoutPostsUpdatedJInput
}

input UserUpdateOneWithoutUsersCreatedInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutUsersCreatedInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutUsersCreatedDataInput
  upsert: UserUpsertWithoutUsersCreatedInput
}

input UserUpdateOneWithoutUsersUpdatedInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutUsersUpdatedInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutUsersUpdatedDataInput
  upsert: UserUpsertWithoutUsersUpdatedInput
}

input UserUpdaterolesInput {
  set: [UserRole!]!
}

input UserUpdateWithoutApiAccessDataInput {
  ApiError: ApiErrorUpdateManyWithoutReqUserInput
  ClientEvent: ClientEventUpdateManyWithoutReqUserInput
  createdAt: DateTimeFieldUpdateOperationsInput
  createdBy: UserUpdateOneWithoutUsersCreatedInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  postsAuthoredJ: PostUpdateManyWithoutAuthorInput
  postsCreatedJ: PostUpdateManyWithoutCreatedByInput
  postsUpdatedJ: PostUpdateManyWithoutUpdatedByInput
  roles: UserUpdaterolesInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  updatedBy: UserUpdateOneWithoutUsersUpdatedInput
  usersCreated: UserUpdateManyWithoutCreatedByInput
  usersUpdated: UserUpdateManyWithoutUpdatedByInput
}

input UserUpdateWithoutApiErrorDataInput {
  ApiAccess: ApiAccessUpdateManyWithoutReqUserInput
  ClientEvent: ClientEventUpdateManyWithoutReqUserInput
  createdAt: DateTimeFieldUpdateOperationsInput
  createdBy: UserUpdateOneWithoutUsersCreatedInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  postsAuthoredJ: PostUpdateManyWithoutAuthorInput
  postsCreatedJ: PostUpdateManyWithoutCreatedByInput
  postsUpdatedJ: PostUpdateManyWithoutUpdatedByInput
  roles: UserUpdaterolesInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  updatedBy: UserUpdateOneWithoutUsersUpdatedInput
  usersCreated: UserUpdateManyWithoutCreatedByInput
  usersUpdated: UserUpdateManyWithoutUpdatedByInput
}

input UserUpdateWithoutClientEventDataInput {
  ApiAccess: ApiAccessUpdateManyWithoutReqUserInput
  ApiError: ApiErrorUpdateManyWithoutReqUserInput
  createdAt: DateTimeFieldUpdateOperationsInput
  createdBy: UserUpdateOneWithoutUsersCreatedInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  postsAuthoredJ: PostUpdateManyWithoutAuthorInput
  postsCreatedJ: PostUpdateManyWithoutCreatedByInput
  postsUpdatedJ: PostUpdateManyWithoutUpdatedByInput
  roles: UserUpdaterolesInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  updatedBy: UserUpdateOneWithoutUsersUpdatedInput
  usersCreated: UserUpdateManyWithoutCreatedByInput
  usersUpdated: UserUpdateManyWithoutUpdatedByInput
}

input UserUpdateWithoutCreatedByDataInput {
  ApiAccess: ApiAccessUpdateManyWithoutReqUserInput
  ApiError: ApiErrorUpdateManyWithoutReqUserInput
  ClientEvent: ClientEventUpdateManyWithoutReqUserInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  postsAuthoredJ: PostUpdateManyWithoutAuthorInput
  postsCreatedJ: PostUpdateManyWithoutCreatedByInput
  postsUpdatedJ: PostUpdateManyWithoutUpdatedByInput
  roles: UserUpdaterolesInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  updatedBy: UserUpdateOneWithoutUsersUpdatedInput
  usersCreated: UserUpdateManyWithoutCreatedByInput
  usersUpdated: UserUpdateManyWithoutUpdatedByInput
}

input UserUpdateWithoutPostsAuthoredJDataInput {
  ApiAccess: ApiAccessUpdateManyWithoutReqUserInput
  ApiError: ApiErrorUpdateManyWithoutReqUserInput
  ClientEvent: ClientEventUpdateManyWithoutReqUserInput
  createdAt: DateTimeFieldUpdateOperationsInput
  createdBy: UserUpdateOneWithoutUsersCreatedInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  postsCreatedJ: PostUpdateManyWithoutCreatedByInput
  postsUpdatedJ: PostUpdateManyWithoutUpdatedByInput
  roles: UserUpdaterolesInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  updatedBy: UserUpdateOneWithoutUsersUpdatedInput
  usersCreated: UserUpdateManyWithoutCreatedByInput
  usersUpdated: UserUpdateManyWithoutUpdatedByInput
}

input UserUpdateWithoutPostsCreatedJDataInput {
  ApiAccess: ApiAccessUpdateManyWithoutReqUserInput
  ApiError: ApiErrorUpdateManyWithoutReqUserInput
  ClientEvent: ClientEventUpdateManyWithoutReqUserInput
  createdAt: DateTimeFieldUpdateOperationsInput
  createdBy: UserUpdateOneWithoutUsersCreatedInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  postsAuthoredJ: PostUpdateManyWithoutAuthorInput
  postsUpdatedJ: PostUpdateManyWithoutUpdatedByInput
  roles: UserUpdaterolesInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  updatedBy: UserUpdateOneWithoutUsersUpdatedInput
  usersCreated: UserUpdateManyWithoutCreatedByInput
  usersUpdated: UserUpdateManyWithoutUpdatedByInput
}

input UserUpdateWithoutPostsUpdatedJDataInput {
  ApiAccess: ApiAccessUpdateManyWithoutReqUserInput
  ApiError: ApiErrorUpdateManyWithoutReqUserInput
  ClientEvent: ClientEventUpdateManyWithoutReqUserInput
  createdAt: DateTimeFieldUpdateOperationsInput
  createdBy: UserUpdateOneWithoutUsersCreatedInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  postsAuthoredJ: PostUpdateManyWithoutAuthorInput
  postsCreatedJ: PostUpdateManyWithoutCreatedByInput
  roles: UserUpdaterolesInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  updatedBy: UserUpdateOneWithoutUsersUpdatedInput
  usersCreated: UserUpdateManyWithoutCreatedByInput
  usersUpdated: UserUpdateManyWithoutUpdatedByInput
}

input UserUpdateWithoutUpdatedByDataInput {
  ApiAccess: ApiAccessUpdateManyWithoutReqUserInput
  ApiError: ApiErrorUpdateManyWithoutReqUserInput
  ClientEvent: ClientEventUpdateManyWithoutReqUserInput
  createdAt: DateTimeFieldUpdateOperationsInput
  createdBy: UserUpdateOneWithoutUsersCreatedInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  postsAuthoredJ: PostUpdateManyWithoutAuthorInput
  postsCreatedJ: PostUpdateManyWithoutCreatedByInput
  postsUpdatedJ: PostUpdateManyWithoutUpdatedByInput
  roles: UserUpdaterolesInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  usersCreated: UserUpdateManyWithoutCreatedByInput
  usersUpdated: UserUpdateManyWithoutUpdatedByInput
}

input UserUpdateWithoutUsersCreatedDataInput {
  ApiAccess: ApiAccessUpdateManyWithoutReqUserInput
  ApiError: ApiErrorUpdateManyWithoutReqUserInput
  ClientEvent: ClientEventUpdateManyWithoutReqUserInput
  createdAt: DateTimeFieldUpdateOperationsInput
  createdBy: UserUpdateOneWithoutUsersCreatedInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  postsAuthoredJ: PostUpdateManyWithoutAuthorInput
  postsCreatedJ: PostUpdateManyWithoutCreatedByInput
  postsUpdatedJ: PostUpdateManyWithoutUpdatedByInput
  roles: UserUpdaterolesInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  updatedBy: UserUpdateOneWithoutUsersUpdatedInput
  usersUpdated: UserUpdateManyWithoutUpdatedByInput
}

input UserUpdateWithoutUsersUpdatedDataInput {
  ApiAccess: ApiAccessUpdateManyWithoutReqUserInput
  ApiError: ApiErrorUpdateManyWithoutReqUserInput
  ClientEvent: ClientEventUpdateManyWithoutReqUserInput
  createdAt: DateTimeFieldUpdateOperationsInput
  createdBy: UserUpdateOneWithoutUsersCreatedInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  postsAuthoredJ: PostUpdateManyWithoutAuthorInput
  postsCreatedJ: PostUpdateManyWithoutCreatedByInput
  postsUpdatedJ: PostUpdateManyWithoutUpdatedByInput
  roles: UserUpdaterolesInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  updatedBy: UserUpdateOneWithoutUsersUpdatedInput
  usersCreated: UserUpdateManyWithoutCreatedByInput
}

input UserUpdateWithWhereUniqueWithoutCreatedByInput {
  data: UserUpdateWithoutCreatedByDataInput!
  where: UserWhereUniqueInput!
}

input UserUpdateWithWhereUniqueWithoutUpdatedByInput {
  data: UserUpdateWithoutUpdatedByDataInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithoutApiAccessInput {
  create: UserCreateWithoutApiAccessInput!
  update: UserUpdateWithoutApiAccessDataInput!
}

input UserUpsertWithoutApiErrorInput {
  create: UserCreateWithoutApiErrorInput!
  update: UserUpdateWithoutApiErrorDataInput!
}

input UserUpsertWithoutClientEventInput {
  create: UserCreateWithoutClientEventInput!
  update: UserUpdateWithoutClientEventDataInput!
}

input UserUpsertWithoutPostsAuthoredJInput {
  create: UserCreateWithoutPostsAuthoredJInput!
  update: UserUpdateWithoutPostsAuthoredJDataInput!
}

input UserUpsertWithoutPostsCreatedJInput {
  create: UserCreateWithoutPostsCreatedJInput!
  update: UserUpdateWithoutPostsCreatedJDataInput!
}

input UserUpsertWithoutPostsUpdatedJInput {
  create: UserCreateWithoutPostsUpdatedJInput!
  update: UserUpdateWithoutPostsUpdatedJDataInput!
}

input UserUpsertWithoutUsersCreatedInput {
  create: UserCreateWithoutUsersCreatedInput!
  update: UserUpdateWithoutUsersCreatedDataInput!
}

input UserUpsertWithoutUsersUpdatedInput {
  create: UserCreateWithoutUsersUpdatedInput!
  update: UserUpdateWithoutUsersUpdatedDataInput!
}

input UserUpsertWithWhereUniqueWithoutCreatedByInput {
  create: UserCreateWithoutCreatedByInput!
  update: UserUpdateWithoutCreatedByDataInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithWhereUniqueWithoutUpdatedByInput {
  create: UserCreateWithoutUpdatedByInput!
  update: UserUpdateWithoutUpdatedByDataInput!
  where: UserWhereUniqueInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  ApiAccess: ApiAccessListRelationFilter
  ApiError: ApiErrorListRelationFilter
  ClientEvent: ClientEventListRelationFilter
  createdAt: DateTimeFilter
  createdBy: UserWhereInput
  createdById: StringNullableFilter
  email: StringFilter
  id: StringFilter
  name: StringFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  password: StringNullableFilter
  postsAuthoredJ: PostListRelationFilter
  postsCreatedJ: PostListRelationFilter
  postsUpdatedJ: PostListRelationFilter
  roles: EnumUserRoleNullableListFilter
  updatedAt: DateTimeFilter
  updatedBy: UserWhereInput
  updatedById: StringNullableFilter
  usersCreated: UserListRelationFilter
  usersUpdated: UserListRelationFilter
}

input UserWhereUniqueInput {
  email: String
  id: String
}
