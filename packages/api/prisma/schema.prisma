datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:postgres@localhost:5432/nexus"
}

generator prisma_client {
  provider = "prisma-client-js"
}

model ApiError {
  id            String   @default(cuid()) @id
  createdAt     DateTime @default(now())

  ip            String
  reqUserId     String?
  reqUser       User?    @relation(fields: [reqUserId], references: [id])
  operationName String
  message       String
  stack         Json
  reqBody       Json
  resBody       Json
}

model ApiAccess {
  id            String   @default(cuid()) @id
  createdAt     DateTime @default(now())
  ip            String

  reqUserId     String?
  reqUser       User?    @relation(fields: [reqUserId], references: [id])
  operationName String
  duration      Int
}

model ClientEvent {
  id            String   @default(cuid()) @id
  createdAt     DateTime @default(now())

  ip            String
  reqUserById   String?
  reqUser       User?    @relation(fields: [reqUserById], references: [id])
  userAgent     String
  name          String
}

model User {
  id            String   @default(cuid()) @id
  createdAt     DateTime @default(now())
  createdById   String?
  createdBy     User?    @relation("UsersCreatedByUser", fields: [createdById], references: [id])
  usersCreated User[]   @relation("UsersCreatedByUser")

  updatedAt     DateTime @updatedAt
  updatedById   String?
  updatedBy     User?    @relation("UsersUpdatedByUser", fields: [updatedById], references: [id])
  usersUpdated User[]   @relation("UsersUpdatedByUser")

  name          String
  roles         UserRole[]
  email         String @unique
  password      String?

  postsAuthored Post[]   @relation("PostsAuthoredByUser")
  postsCreated  Post[]   @relation("PostsCreatedByUser")
  postsUpdated  Post[]   @relation("PostsUpdatedByUser")

  @@index([email])
}

enum UserRole {
  ADMIN
  EDITOR
  AUTHOR
}

model Post {
  id            String     @default(cuid()) @id
  createdAt     DateTime   @default(now())
  createdById   String?
  createdBy     User?      @relation("PostsCreatedByUser", fields: [createdById], references: [id])
  updatedAt     DateTime   @updatedAt
  updatedById   String?
  updatedBy     User?      @relation("PostsUpdatedByUser", fields: [updatedById], references: [id])

  title         String
  tags          Tag[]
  status        PostStatus
  authorId      String
  author        User       @relation("PostsAuthoredByUser", fields: [authorId], references: [id])
}

enum PostStatus {
  DRAFT
  PUBLISHED
}

model Tag {
  id     Int    @default(autoincrement()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  value  String
  postId String?
  post   Post?  @relation(fields: [postId], references: [id])
}